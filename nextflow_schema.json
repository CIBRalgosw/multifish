{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/JaneliaSciComp/multifish/tower/nextflow_schema.json",
    "title": "JaneliaSciComp/multifish pipeline parameters",
    "description": "EASI-FISH spatial transcriptomics analysis pipeline",
    "type": "object",
    "definitions": {
        "data": {
            "title": "Input Data",
            "type": "object",
            "fa_icon": "fas fa-database",
            "description": "Describes the input data and models",
            "help_text": "",
            "required": [
                "data_dir",
                "segmentation_model_dir",
                "acq_names",
                "ref_acq",
                "channels",
                "dapi_channel",
                "bleed_channel"
            ],
            "properties": {
                "data_dir": {
                    "type": "string",
                    "fa_icon": "fas fa-folder-open",
                    "description": "Path to the directory containing the input CZI/MVL acquisition files."
                },
                "data_manifest": {
                    "type": "string",
                    "description": "Name of file manifest or URL where it can be found.",
                    "fa_icon": "far fa-list-alt",
                    "help_text": "If specified, the data in the manifest is downloaded into `--data_dir` before the pipeline begins. Valid values are any filename found in the data-sets directory (e.g. \"demo_small\", \"demo_medium\") or any URL which points to a manifest file. "
                },
                "segmentation_model_dir": {
                    "type": "string",
                    "fa_icon": "fas fa-folder-open",
                    "description": "Path to the directory containing the machine learning model for segmentation",
                    "help_text": "Defaults to ${projectDir}/external-modules/segmentation/model/starfinity."
                },
                "acq_names": {
                    "type": "string",
                    "fa_icon": "fas fa-vial",
                    "description": "Names of acquisition rounds to process. These should match the names of the CZI/MVL files found in the data_dir.",
                    "help_text": "e.g. LHA3_R3_small,LHA3_R5_small if you have files called LHA3_R3_small.czi and LHA3_R5_small.czi"
                },
                "ref_acq": {
                    "type": "string",
                    "fa_icon": "fas fa-asterisk",
                    "description": "Name of the acquisition round to use as the fixed reference",
                    "help_text": "e.g. LHA3_R3_small"
                },
                "channels": {
                    "type": "string",
                    "fa_icon": "fas fa-layer-group",
                    "default": "c0,c1,c2,c3",
                    "description": "List of channel names to process",
                    "help_text": "Channel names are specified in the format \"c[channel_number]\", where the channel_number is 0-indexed."
                },
                "dapi_channel": {
                    "type": "string",
                    "fa_icon": "fas fa-asterisk",
                    "default": "c2",
                    "description": "Name of the DAPI channel",
                    "help_text": "The DAPI channel is used as a reference channel for registration, segmentation, and spot extraction."
                },
                "bleed_channel": {
                    "type": "string",
                    "fa_icon": "fas fa-asterisk",
                    "default": "c3",
                    "description": "Channel (other than DAPI) that needs bleedthrough correction"
                }
            }
        },
        "output": {
            "title": "Output Options",
            "type": "object",
            "fa_icon": "fas fa-sign-out-alt",
            "description": "Options for the overall pipeline output",
            "help_text": "",
            "properties": {
                "output_dir": {
                    "type": "string",
                    "description": "Path to the directory containing pipeline outputs",
                    "fa_icon": "fas fa-folder-open"
                }
            },
            "required": [
                "output_dir"
            ]
        },
        "stitching": {
            "title": "Stitching",
            "type": "object",
            "description": "Stitching options",
            "properties": {
                "stitching_output": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Output directory for stitching results. Default: stitching",
                    "help_text": "This directory path is relative to `--output_dir`",
                    "hidden": true
                },
                "spark_work_dir": {
                    "type": "string",
                    "fa_icon": "fas fa-folder-open",
                    "description": "Path to directory containing Spark working files and logs during stitching. Default: ${workDir}/spark",
                    "help_text": "The Spark configuration is written here by the pipeline before launching the Spark cluster. The Spark workers write their logs back here, and it is also used to communicate the master IP address to all workers. Therefore, this must be a shared directory accessible to both the head node and all worker nodes. On AWS, Fuse-mounted S3 will not work here due to write buffering. It's best to use FSx, but EBS will also work, as long as its mounted on all the EC2 nodes. "
                },
                "spark_local_dir": {
                    "type": "string",
                    "fa_icon": "far fa-folder-open",
                    "description": "Path to directory that Spark will uses for local temporary files. Default: /tmp",
                    "help_text": "This path does not need to be shared among workers, and does not need to be accessible to the head node. Usually, /tmp will do."
                },
                "stitching_ref": {
                    "type": "integer",
                    "fa_icon": "fas fa-asterisk",
                    "description": "Index of the channel used for stitching. Default: index of `--dapi_channel`",
                    "help_text": "If this is not defined it defaults to `--dapi_channel`"
                },
                "resolution": {
                    "type": "string",
                    "fa_icon": "fas fa-file-image",
                    "pattern": "^[\\.\\d]+,[\\.\\d]+,[\\.\\d]+$",
                    "description": "Voxel resolution in all 3 dimensions. Default: 0.23,0.23,0.42",
                    "help_text": "This is a comma-delimited tuple as x,y,z."
                },
                "axis": {
                    "type": "string",
                    "fa_icon": "fas fa-chart-line",
                    "description": "Axis mapping for the objective->pixel coordinates conversion. Default: -x,y,z",
                    "help_text": "Comma-separated axis specification with optional flips."
                },
                "stitching_block_size": {
                    "type": "string",
                    "fa_icon": "fas fa-cube",
                    "pattern": "^\\d+,\\d+,\\d+$",
                    "description": "Block size to use when converting CZI to n5 before stitching. Default: 128,128,64"
                },
                "retile_z_size": {
                    "type": "integer",
                    "fa_icon": "far fa-square",
                    "description": "Block size (in Z dimension) when retiling after stitching. Default: 64",
                    "help_text": "This must be smaller than the number of Z slices in the data."
                },
                "stitching_mode": {
                    "type": "string",
                    "fa_icon": "fas fa-braille",
                    "description": "Rematching mode ('full' or 'incremental'). Default: incremental",
                    "hidden": true
                },
                "stitching_padding": {
                    "type": "string",
                    "fa_icon": "fas fa-expand",
                    "description": "Padding for the overlap regions. Default: 0,0,0"
                },
                "stitching_blur_sigma": {
                    "type": "integer",
                    "fa_icon": "fas fa-border-style",
                    "description": "Sigma value of the gaussian blur preapplied to the images before stitching. Default: 2"
                },
                "workers": {
                    "type": "integer",
                    "fa_icon": "fas fa-cogs",
                    "description": "Number of Spark workers to use for stitching one acquisition. Default: 4"
                },
                "worker_cores": {
                    "type": "integer",
                    "fa_icon": "fas fa-microchip",
                    "description": "Number of cores allocated to each Spark worker. Default: 4"
                },
                "gb_per_core": {
                    "type": "integer",
                    "fa_icon": "fas fa-cog",
                    "description": "Size of memory (in GB) that is allocated for each core of a Spark worker. Default: 4",
                    "help_text": "The total memory usage for stitching one acquisition will be workers * worker_cores * gb_per_core. "
                },
                "driver_memory": {
                    "type": "string",
                    "fa_icon": "fas fa-memory",
                    "description": "Amount of memory to allocate for the Spark driver. Default: 15g"
                },
                "wait_for_spark_timeout_seconds": {
                    "type": "integer",
                    "fa_icon": "fas fa-clock",
                    "description": "Number of seconds to wait for Spark cluster to start. Default: 3600",
                    "hidden": true
                },
                "sleep_between_timeout_checks_seconds": {
                    "type": "integer",
                    "fa_icon": "fas fa-clock",
                    "description": "Number of seconds to sleep between timeout checks. Default: 2",
                    "hidden": true
                },
                "stitching_app": {
                    "type": "string",
                    "fa_icon": "fas fa-file-medical-alt",
                    "description": "Path to the JAR file containing the stitching application. Default: /app/app.jar",
                    "hidden": true
                }
            },
            "fa_icon": "far fa-map"
        },
        "registration": {
            "title": "Registration",
            "type": "object",
            "description": "Options for the registration algorithm (Bigstream)",
            "default": "",
            "properties": {
                "registration_output": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Output directory for registration results. Default: registration",
                    "help_text": "This path is relative to `--output_dir`.",
                    "hidden": true
                },
                "aff_scale": {
                    "type": "string",
                    "description": "The scale level for affine alignments. Default: s3",
                    "fa_icon": "fas fa-file-image"
                },
                "def_scale": {
                    "type": "string",
                    "description": "The scale level for deformable alignments. Default: s2",
                    "fa_icon": "fas fa-file-image"
                },
                "spots_cc_radius": {
                    "type": "integer",
                    "fa_icon": "far fa-circle",
                    "description": "Default: 8"
                },
                "spots_spot_number": {
                    "type": "integer",
                    "fa_icon": "fas fa-hashtag",
                    "description": "Default: 2000"
                },
                "ransac_cc_cutoff": {
                    "type": "number",
                    "fa_icon": "fas fa-level-down-alt",
                    "description": "Default: 0.9"
                },
                "ransac_dist_threshold": {
                    "type": "number",
                    "fa_icon": "fas fa-level-down-alt",
                    "description": "Default: 2.5"
                },
                "deform_iterations": {
                    "type": "string",
                    "fa_icon": "fas fa-retweet",
                    "description": "Default: 500x200x25x1"
                },
                "deform_auto_mask": {
                    "type": "integer",
                    "fa_icon": "fas fa-mask",
                    "description": "Default: 0"
                },
                "registration_xy_stride": {
                    "type": "integer",
                    "description": "The number of voxels along x/y for registration tiling. Default: 256",
                    "fa_icon": "fas fa-walking",
                    "help_text": "Must be power of 2."
                },
                "registration_xy_overlap": {
                    "type": "integer",
                    "description": "Tile overlap on x/y axes",
                    "help_text": "Defaults to registration_xy_stride/8 when not specified.",
                    "fa_icon": "fas fa-align-center",
                    "hidden": true
                },
                "registration_z_stride": {
                    "type": "integer",
                    "description": "The number of voxels along z for registration tiling. Default: 256",
                    "fa_icon": "fas fa-walking",
                    "help_text": "Must be power of 2."
                },
                "registration_z_overlap": {
                    "type": "integer",
                    "description": "Tile overlap on Z axes",
                    "help_text": "Defaults to registration_z_stride/8 when not specified.",
                    "fa_icon": "fas fa-align-center",
                    "hidden": true
                },
                "aff_scale_transform_cpus": {
                    "type": "integer",
                    "description": "Number of CPU cores for affine scale registration. Default: 1",
                    "fa_icon": "fas fa-microchip"
                },
                "def_scale_transform_cpus": {
                    "type": "integer",
                    "description": "Number of CPU cores for deformable scale registration. Default: 8",
                    "fa_icon": "fas fa-microchip"
                },
                "registration_stitch_cpus": {
                    "type": "integer",
                    "description": "Number of CPU cores for re-stitching registered tiles. Default: 2",
                    "fa_icon": "fas fa-microchip"
                },
                "registration_transform_cpus": {
                    "type": "integer",
                    "description": "Number of CPU cores for final registered transform. Default: 12",
                    "fa_icon": "fas fa-microchip"
                }
            },
            "fa_icon": "fas fa-layer-group"
        },
        "segmentation": {
            "title": "Cell Segmentation",
            "description": "Options for the cell segmentation algorithm (Starfinity)",
            "help_text": "",
            "type": "object",
            "fa_icon": "fab fa-cloudsmith",
            "properties": {
                "segmentation_output": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Output directory for segmentation results. Default: segmentation",
                    "help_text": "This path is relative to `--output_dir`.",
                    "hidden": true
                },
                "segmentation_scale": {
                    "type": "string",
                    "fa_icon": "fas fa-cube",
                    "description": "Imagery scale to use for segmentation. Default: s2"
                },
                "segmentation_cpus": {
                    "type": "integer",
                    "fa_icon": "fas fa-microchip",
                    "description": "Number of CPU cores to allocate for segmentation. Default: 3"
                }
            }
        },
        "spot_extraction": {
            "title": "Spot Extraction",
            "type": "object",
            "description": "Options for the spot extraction algorithm (hAirlocalize)",
            "fa_icon": "fas fa-eye-dropper",
            "properties": {
                "spot_extraction_output": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Output directory for spot extraction results. Default: spots",
                    "help_text": "This path is relative to `--output_dir`.",
                    "hidden": true
                },
                "spot_extraction_scale": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Scale of imagery to use for spot extraction. Default: s0"
                },
                "spot_extraction_xy_stride": {
                    "type": "integer",
                    "fa_icon": "fas fa-cube",
                    "description": "The number of voxels along x/y for registration tiling, must be power of 2. Increasing this requires increasing `--spot_extraction_memory`. Default: 1024"
                },
                "spot_extraction_xy_overlap": {
                    "type": "integer",
                    "fa_icon": "fas fa-cube",
                    "description": "Tile overlap on x/y axes",
                    "help_text": "Defaults to 5% of spot_extraction_xy_stride",
                    "hidden": true
                },
                "spot_extraction_z_stride": {
                    "type": "integer",
                    "fa_icon": "fas fa-cube",
                    "description": "The number of voxels along z for registration tiling, must be power of 2. Increasing this requires increasing `--spot_extraction_memory`. Default: 512"
                },
                "spot_extraction_z_overlap": {
                    "type": "integer",
                    "fa_icon": "fas fa-cube",
                    "description": "Tile overlap on z axes",
                    "help_text": "Defaults to 5% of spot_extraction_z_stride",
                    "hidden": true
                },
                "default_airlocalize_params": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Path to the default AirLocalize parameter file. Default: /app/airlocalize/params/air_localize_default_params.txt",
                    "help_text": "By default, this points to default parameters inside the container",
                    "hidden": true
                },
                "per_channel_air_localize_params": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Comma-delimited paths to alternative AirLocalize parameter files, one per channel.",
                    "help_text": "If you have 4 channels, and you are extracting spots from c0, c1, and c3, this parameter should look like this: `/path/to/params_c0.txt,/path/to/params_c1.txt,,/path/to/params_c3.txt`. Note the double comma to denote the empty file for c2, which should not be processed."
                },
                "spot_extraction_cpus": {
                    "type": "integer",
                    "fa_icon": "fas fa-microchip",
                    "description": "Number of CPU cores to allocate for each AirLocalize job. Default: 1"
                },
                "spot_extraction_memory": {
                    "type": "integer",
                    "fa_icon": "fas fa-memory",
                    "description": "Amount of RAM (in GB) to allocate to each AirLocalize job. Needs to be increased when increasing strides. Default: 1"
                }
            }
        },
        "spot_warping": {
            "title": "Spot Warping",
            "type": "object",
            "description": "Options for warping detected spots to registration",
            "properties": {
                "warp_spots_cpus": {
                    "type": "integer",
                    "fa_icon": "fas fa-microchip",
                    "description": "Number of CPU cores to use for warp spots. Default: 2"
                }
            },
            "fa_icon": "fas fa-chess-board"
        },
        "intensities": {
            "title": "Intensity Measurement",
            "type": "object",
            "description": "Options for extracting quantified measurements of spot intensities",
            "properties": {
                "measure_intensities_output": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Output directory for intensities. Default: intensities",
                    "help_text": "This path is relative to `--output_dir`.",
                    "hidden": true
                },
                "measure_intensities_cpus": {
                    "type": "integer",
                    "fa_icon": "fas fa-microchip",
                    "description": "Number of CPU cores to use for intensity measurement. Default: 1"
                }
            },
            "fa_icon": "fas fa-ruler-horizontal"
        },
        "spot_assignment": {
            "title": "Spot Assignment",
            "type": "object",
            "description": "Options for mapping spot counts to segmented cells",
            "properties": {
                "assign_spots_output": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Output directory for spot assignments. Default: assignments",
                    "help_text": "This path is relative to `--output_dir`.",
                    "hidden": true
                },
                "assign_spots_cpus": {
                    "type": "integer",
                    "fa_icon": "fas fa-microchip",
                    "description": "Number of CPU cores to use for spot assignment. Default: 1"
                }
            },
            "fa_icon": "fas fa-random"
        },
        "containers": {
            "title": "Container Options",
            "type": "object",
            "fa_icon": "fab fa-docker",
            "properties": {
                "mfrepo": {
                    "type": "string",
                    "description": "Docker registry/repository to use for containers. Default: janeliascicomp",
                    "fa_icon": "fas fa-database",
                    "help_text": "By default, the pipeline uses containers built as part of this project and deployed to DockerHub. You can rebuild the containers and deploy them to your own Registry and specify it here.",
                    "hidden": true
                },
                "spark_container_repo": {
                    "type": "string",
                    "description": "Docker container repo for stitching. Default: <mfrepo>",
                    "fa_icon": "fas fa-database",
                    "hidden": true
                },
                "spark_container_name": {
                    "type": "string",
                    "description": "Docker container name for stitching. Default: stitching",
                    "fa_icon": "fas fa-box-open",
                    "hidden": true
                },
                "spark_container_version": {
                    "type": "string",
                    "description": "Docker container version for stitching. Default: 1.0.0",
                    "fa_icon": "fas fa-code-branch",
                    "hidden": true
                },
                "registration_container": {
                    "type": "string",
                    "description": "Docker container for running registration and warp_spots. Default: <mfrepo>/registration:1.2.0",
                    "fa_icon": "fas fa-box-open",
                    "hidden": true
                },
                "segmentation_container": {
                    "type": "string",
                    "description": "Docker container for running segmentation. Default: <mfrepo>/segmentation:1.0.0",
                    "fa_icon": "fas fa-box-open",
                    "hidden": true
                },
                "spot_extraction_container": {
                    "type": "string",
                    "description": "Docker container for running spot extraction. Default: <mfrepo>/spot_extraction:1.0.0",
                    "fa_icon": "fas fa-box-open",
                    "hidden": true
                },
                "spots_assignment_container": {
                    "type": "string",
                    "description": "Docker container for running intensity measurement and spot assignment. Default: <mfrepo>/spot_assignment:1.2.0",
                    "fa_icon": "fas fa-box-open",
                    "hidden": true
                }
            },
            "description": "Customize the Docker containers used for each pipeline step"
        },
        "other": {
            "title": "Other Options",
            "type": "object",
            "fa_icon": "fas fa-list-ul",
            "properties": {
                "skip": {
                    "type": "string",
                    "description": "Comma-delimited list of steps to skip, e.g. 'stitching,registration' (Valid values: stitching, spot_extraction, segmentation, registration, warp_spots, intensities, assign_spots)",
                    "fa_icon": "fas fa-fast-forward"
                },
                "singularity_cache_dir": {
                    "type": "string",
                    "description": "Shared directory where Singularity containers are cached.",
                    "fa_icon": "fas fa-folder-open",
                    "hidden": true
                },
                "runtime_opts": {
                    "type": "string",
                    "fa_icon": "fas fa-terminal",
                    "help_text": "Runtime options for Singularity must include mounts for any directory paths you are using. You can also pass the --nv flag here to make use of NVIDIA GPU resources. For example, `--nv -B /your/data/dir -B /your/output/dir`\n",
                    "description": "Runtime options for the container engine being used (e.g. Singularity or Docker)",
                    "hidden": true
                },
                "lsf_opts": {
                    "type": "string",
                    "description": "Options for LSF cluster at Janelia, when using the `lsf` profile.",
                    "fa_icon": "fas fa-terminal",
                    "hidden": true
                }
            },
            "description": "Other global options affecting all pipelines stages"
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/data"
        },
        {
            "$ref": "#/definitions/output"
        },
        {
            "$ref": "#/definitions/stitching"
        },
        {
            "$ref": "#/definitions/registration"
        },
        {
            "$ref": "#/definitions/segmentation"
        },
        {
            "$ref": "#/definitions/spot_extraction"
        },
        {
            "$ref": "#/definitions/spot_warping"
        },
        {
            "$ref": "#/definitions/intensities"
        },
        {
            "$ref": "#/definitions/spot_assignment"
        },
        {
            "$ref": "#/definitions/containers"
        },
        {
            "$ref": "#/definitions/other"
        }
    ]
}